name: Claude Release Notes Generator

on:
  push:
    tags: ['v*']
  workflow_dispatch:  # 手動実行用（テスト目的）
    inputs:
      tag_name:
        description: 'タグ名（例: v1.0.0）'
        required: true

jobs:
  create_release_notes:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      contents: write
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得してタグ比較を可能にする
          
      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "CURRENT_TAG=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
          else
            echo "CURRENT_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
          
      - name: Get previous tag
        id: get_previous_tag
        run: |
          # 現在のタグより前の最新タグを取得
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${{ env.CURRENT_TAG }}^" 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "previous_tag=" >> $GITHUB_OUTPUT
            echo "is_first_release=true" >> $GITHUB_OUTPUT
            echo "comparison_range=HEAD" >> $GITHUB_OUTPUT
          else
            echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
            echo "is_first_release=false" >> $GITHUB_OUTPUT
            echo "comparison_range=${PREVIOUS_TAG}...${{ env.CURRENT_TAG }}" >> $GITHUB_OUTPUT
          fi
          
          echo "Previous tag: ${PREVIOUS_TAG}"
          echo "Current tag: ${{ env.CURRENT_TAG }}"
          
      - name: Generate commit log
        id: generate_log
        run: |
          echo "## コミット履歴を取得中..."
          
          if [ "${{ steps.get_previous_tag.outputs.is_first_release }}" = "true" ]; then
            # 初回リリースの場合は全履歴
            git log --oneline --pretty=format:"%h %s" > commits.txt
          else
            # 前回タグとの差分
            git log ${{ steps.get_previous_tag.outputs.comparison_range }} --oneline --pretty=format:"%h %s" > commits.txt
          fi
          
          echo "取得したコミット数: $(wc -l < commits.txt)"
          
      - name: Generate release notes with Claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allowed_tools: "bash,git"
          timeout_minutes: 15
          direct_prompt: |
            リリース ${{ env.CURRENT_TAG }} のCHANGELOGを生成してください。
            
            ## バージョン情報
            - 現在のタグ: ${{ env.CURRENT_TAG }}
            - 前回のタグ: ${{ steps.get_previous_tag.outputs.previous_tag }}
            - 初回リリース: ${{ steps.get_previous_tag.outputs.is_first_release }}
            - 比較範囲: ${{ steps.get_previous_tag.outputs.comparison_range }}
            
            ## コミット履歴
            以下のコミット履歴を解析してCHANGELOGを作成してください：
            ```
            $(cat commits.txt)
            ```
            
            ## 出力形式
            Keep a Changelog形式に従って `changelog.md` ファイルを作成してください：
            
            ```markdown
            # Changelog
            
            ## [${{ env.CURRENT_TAG }}] - $(date +%Y-%m-%d)
            
            ### Added（新機能）
            - 新しく追加された機能
            
            ### Changed（変更）
            - 既存機能の変更
            
            ### Fixed（修正）
            - バグ修正
            
            ### Security（セキュリティ）
            - セキュリティ関連の修正
            ```
            
            ## 注意事項
            - 空のセクションは含めない
            - ユーザーに影響のない内部的な変更は省略可
            - 破壊的変更は **BREAKING CHANGE** として明記
            - 日本語で記述
            - 必ず `changelog.md` ファイルを作成すること
            
      - name: Verify changelog creation
        run: |
          if [ ! -f "changelog.md" ]; then
            echo "❌ changelog.md が生成されていません。"
            exit 1
          fi
          
          echo "📝 生成されたchangelog.md:"
          cat changelog.md
          
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # リリースを作成
          gh release create "${{ env.CURRENT_TAG }}" \
            --title "Release ${{ env.CURRENT_TAG }}" \
            --notes-file changelog.md \
            --generate-notes
            
      - name: Update main CHANGELOG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # メインのCHANGELOGファイルを更新
          if [ -f "CHANGELOG.md" ]; then
            # 既存のCHANGELOGに新しいエントリを追加
            {
              head -n 1 CHANGELOG.md  # タイトル行
              echo ""
              cat changelog.md | tail -n +2  # 新しいエントリ（タイトル行を除く）
              echo ""
              tail -n +2 CHANGELOG.md | tail -n +2  # 既存の内容（タイトル行を除く）
            } > CHANGELOG_new.md
            mv CHANGELOG_new.md CHANGELOG.md
          else
            # CHANGELOG.mdが存在しない場合は新規作成
            {
              echo "# Changelog"
              echo ""
              echo "このプロジェクトのすべての重要な変更は、このファイルに記録されます。"
              echo ""
              cat changelog.md | tail -n +2
            } > CHANGELOG.md
          fi
          
          # CHANGELOGの更新をコミット
          if [ -n "$(git status --porcelain CHANGELOG.md)" ]; then
            git config --global user.name "claude-release[bot]"
            git config --global user.email "claude-release[bot]@users.noreply.github.com"
            git add CHANGELOG.md
            git commit -m "docs: update CHANGELOG for ${{ env.CURRENT_TAG }}"
            git push origin main
          fi
          
      - name: Notify release creation
        if: success()
        run: |
          echo "✅ リリース ${{ env.CURRENT_TAG }} を正常に作成しました"
          echo "📝 CHANGELOG.md を更新しました"
          
      - name: Handle failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 失敗時はIssueを作成
          gh issue create \
            --title "🚨 リリースノート生成に失敗: ${{ env.CURRENT_TAG }}" \
            --body "## 概要
          リリース ${{ env.CURRENT_TAG }} のリリースノート自動生成に失敗しました。
          
          ## 確認事項
          - [ ] タグが正しく作成されているか
          - [ ] 前回のタグとの比較が可能か
          - [ ] リポジトリの権限設定
          - [ ] ANTHROPIC_API_KEY の設定
          
          ## 手動対応
          必要に応じて手動でリリースノートを作成してください。
          
          ## エラー情報
          - タグ: ${{ env.CURRENT_TAG }}
          - ワークフロー: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --label "auto-generated" 